CREATE OR REPLACE FUNCTION get_combined_rates_data(
    p_source_id BIGINT,
    p_destination_id BIGINT
)
RETURNS TABLE (
    id BIGINT,
    unique_uuid CHAR(24),
    company_id BIGINT,
    company_name VARCHAR,
    rate NUMERIC,
    currency CHAR(15),
    free_days NUMERIC,  -- free_days is declared as NUMERIC here
    spot_filed CHAR(15),
    transhipment_add_port CHAR(50),
    effective_date DATE,
    expiration_date DATE,
	un_number CHAR(4),
    vessel_name CHAR(50),
    cargotype CHAR(50),
    voyage CHAR(50),
    hazardous BOOL,
    terms_condition CHAR(255),
    source_id BIGINT,
    source_name VARCHAR,
    destination_id BIGINT,
    destination_name VARCHAR,
	transit_time_id BIGINT,
    transit_time INTEGER
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        m.id,
        m.unique_uuid::CHAR(24),
        m.company_id,
	    c.name AS company_name,
        m.rate,
        m.currency::CHAR(15),
        m.free_days::NUMERIC,
        m.spot_filed::CHAR(15),
        m.transhipment_add_port::CHAR(50),
        m.effective_date::DATE,
        m.expiration_date::DATE,
        m.un_number::CHAR(4),
        m.vessel_name::CHAR(50),
        m.cargotype::CHAR(50),
        m.voyage::CHAR(50),
	    m.hazardous::BOOL,
        m.terms_condition::CHAR(255),
        m.source_id,
        s.name AS source_name,
        m.destination_id,
        d.name AS destination_name,
	    m.transit_time_id,
        CAST(floor(t.time::NUMERIC) AS INTEGER) AS transit_time
   FROM 
        public.aggregator_manualrate m
    JOIN public.aggregator_company c ON c.id = m.company_id
    JOIN public.aggregator_source s ON s.id = m.source_id
    JOIN public.aggregator_destination d ON d.id = m.destination_id
    JOIN public.aggregator_transittime t ON t.id = m.transit_time_id
    WHERE 
        m.source_id = p_source_id 
        AND m.destination_id = p_destination_id
        AND m.soft_delete = FALSE

    UNION ALL
    
    SELECT 
        r.id,
        r.unique_uuid::CHAR(24),
        r.company_id,
        c.name AS company_name,
	    r.rate::NUMERIC(5, 1),
        r.currency::CHAR(15),
        r.free_days::NUMERIC,
        r.spot_filed::CHAR(15),
        r.transhipment_add_port::CHAR(50),
        r.effective_date::DATE,
	    r.expiration_date::DATE,
        r.un_number::CHAR(4),
        r.vessel_name::CHAR(50),
	    r.cargotype::CHAR(50),
        r.voyage::CHAR(50),
	    r.hazardous::BOOL,
        r.terms_condition::CHAR(255),
        r.source_id,
        s.name AS source_name,
        r.destination_id,
        d.name AS destination_name,
	    r.transit_time_id,
        CAST(floor(t.time::NUMERIC) AS INTEGER) AS transit_time
    FROM 
        public.aggregator_rate r
    JOIN public.aggregator_company c ON c.id = r.company_id
    JOIN public.aggregator_source s ON s.id = r.source_id
    JOIN public.aggregator_destination d ON d.id = r.destination_id
	JOIN public.aggregator_transittime t ON t.id = r.transit_time_id
    WHERE 
        r.source_id = p_source_id 
        AND r.destination_id = p_destination_id
        AND r.soft_delete = FALSE;
END;
$$ LANGUAGE plpgsql;

SELECT * FROM get_combined_rates_data(7, 7);





##########################################  GENERATING UUID FOR SPECIFIC RATE #############################################

CREATE OR REPLACE FUNCTION generate_unique_uuid(input_id INT, input_rate NUMERIC)
RETURNS VARCHAR(24) AS $$
DECLARE
    result_uuid VARCHAR(24);
BEGIN
    -- Generate a unique 24-character string (this example uses substring of UUID)
    result_uuid := SUBSTRING(REPLACE(gen_random_uuid()::TEXT, '-', ''), 1, 24);
    RETURN result_uuid;
END;
$$ LANGUAGE plpgsql;



DO $$
DECLARE
    generated_uuid VARCHAR(24);
BEGIN
    -- Generate the unique UUID
    generated_uuid := generate_unique_uuid(246, '4582.00');

    -- Uncomment the following lines if you wish to update the table
    UPDATE public.aggregator_manualrate
    SET unique_uuid = generated_uuid
    WHERE id = 246 AND rate = '4582.00';

    -- For debugging, you can raise a notice
    -- RAISE NOTICE 'Generated UUID: %', generated_uuid;
END $$;



**************************************************  TO CREATE TABLE CLIENT_TEMPLATE_COMPANY  ************************************ 

-- CREATE TABLE public.aggregator_clienttemplatecompany (
--     id SERIAL PRIMARY KEY,
-- 	unique_uuid varchar(24),
--     name VARCHAR(255) NOT NULL,
-- 	soft_delete bool
-- );
-- insert into public.aggregator_clienttemplatecompany (id,unique_uuid,name,soft_delete) values (1, null,'EMIRATES',false);
-- insert into public.aggregator_clienttemplatecompany (id,unique_uuid,name,soft_delete) values (2, null,'INTERSIA',false);
-- insert into public.aggregator_clienttemplatecompany (id,unique_uuid,name,soft_delete) values (3, null,'COSCO',false);